local d = (import 'github.com/jsonnet-libs/docsonnet/doc-util/main.libsonnet');
{
  '#':: d.pkg(name='resource', url='', help=''),
  administrative_unit: (import 'administrative_unit.libsonnet'),
  administrative_unit_member: (import 'administrative_unit_member.libsonnet'),
  app_role_assignment: (import 'app_role_assignment.libsonnet'),
  application: (import 'application.libsonnet'),
  application_certificate: (import 'application_certificate.libsonnet'),
  application_federated_identity_credential: (import 'application_federated_identity_credential.libsonnet'),
  application_password: (import 'application_password.libsonnet'),
  application_pre_authorized: (import 'application_pre_authorized.libsonnet'),
  claims_mapping_policy: (import 'claims_mapping_policy.libsonnet'),
  conditional_access_policy: (import 'conditional_access_policy.libsonnet'),
  custom_directory_role: (import 'custom_directory_role.libsonnet'),
  directory_role: (import 'directory_role.libsonnet'),
  directory_role_assignment: (import 'directory_role_assignment.libsonnet'),
  directory_role_member: (import 'directory_role_member.libsonnet'),
  group: (import 'group.libsonnet'),
  group_member: (import 'group_member.libsonnet'),
  invitation: (import 'invitation.libsonnet'),
  named_location: (import 'named_location.libsonnet'),
  service_principal: (import 'service_principal.libsonnet'),
  service_principal_certificate: (import 'service_principal_certificate.libsonnet'),
  service_principal_claims_mapping_policy_assignment: (import 'service_principal_claims_mapping_policy_assignment.libsonnet'),
  service_principal_delegated_permission_grant: (import 'service_principal_delegated_permission_grant.libsonnet'),
  service_principal_password: (import 'service_principal_password.libsonnet'),
  synchronization_job: (import 'synchronization_job.libsonnet'),
  synchronization_secret: (import 'synchronization_secret.libsonnet'),
  user: (import 'user.libsonnet'),
}
