local d = (import 'github.com/jsonnet-libs/docsonnet/doc-util/main.libsonnet');
{
  '#':: d.pkg(name='azuread', url='', help='The `azuread` package contains functions and utilities for setting up the provider, resources, and data\nsources of the [azuread Terraform provider](TODO) using Jsonnet.\n\nThis package is autogenerated from the [tf-libsonnet/libgenerator](https://github.com/tf-libsonnet/libgenerator)\nproject.\n'),
  provider: (import 'provider_azuread.libsonnet'),
  access_package: (import 'resources/access_package.libsonnet'),
  access_package_assignment_policy: (import 'resources/access_package_assignment_policy.libsonnet'),
  access_package_catalog: (import 'resources/access_package_catalog.libsonnet'),
  access_package_catalog_role_assignment: (import 'resources/access_package_catalog_role_assignment.libsonnet'),
  access_package_resource_catalog_association: (import 'resources/access_package_resource_catalog_association.libsonnet'),
  access_package_resource_package_association: (import 'resources/access_package_resource_package_association.libsonnet'),
  administrative_unit: (import 'resources/administrative_unit.libsonnet'),
  administrative_unit_member: (import 'resources/administrative_unit_member.libsonnet'),
  administrative_unit_role_member: (import 'resources/administrative_unit_role_member.libsonnet'),
  app_role_assignment: (import 'resources/app_role_assignment.libsonnet'),
  application: (import 'resources/application.libsonnet'),
  application_api_access: (import 'resources/application_api_access.libsonnet'),
  application_app_role: (import 'resources/application_app_role.libsonnet'),
  application_certificate: (import 'resources/application_certificate.libsonnet'),
  application_fallback_public_client: (import 'resources/application_fallback_public_client.libsonnet'),
  application_federated_identity_credential: (import 'resources/application_federated_identity_credential.libsonnet'),
  application_from_template: (import 'resources/application_from_template.libsonnet'),
  application_identifier_uri: (import 'resources/application_identifier_uri.libsonnet'),
  application_known_clients: (import 'resources/application_known_clients.libsonnet'),
  application_optional_claims: (import 'resources/application_optional_claims.libsonnet'),
  application_owner: (import 'resources/application_owner.libsonnet'),
  application_password: (import 'resources/application_password.libsonnet'),
  application_permission_scope: (import 'resources/application_permission_scope.libsonnet'),
  application_pre_authorized: (import 'resources/application_pre_authorized.libsonnet'),
  application_redirect_uris: (import 'resources/application_redirect_uris.libsonnet'),
  application_registration: (import 'resources/application_registration.libsonnet'),
  authentication_strength_policy: (import 'resources/authentication_strength_policy.libsonnet'),
  claims_mapping_policy: (import 'resources/claims_mapping_policy.libsonnet'),
  conditional_access_policy: (import 'resources/conditional_access_policy.libsonnet'),
  custom_directory_role: (import 'resources/custom_directory_role.libsonnet'),
  directory_role: (import 'resources/directory_role.libsonnet'),
  directory_role_assignment: (import 'resources/directory_role_assignment.libsonnet'),
  directory_role_eligibility_schedule_request: (import 'resources/directory_role_eligibility_schedule_request.libsonnet'),
  directory_role_member: (import 'resources/directory_role_member.libsonnet'),
  group: (import 'resources/group.libsonnet'),
  group_member: (import 'resources/group_member.libsonnet'),
  invitation: (import 'resources/invitation.libsonnet'),
  named_location: (import 'resources/named_location.libsonnet'),
  service_principal: (import 'resources/service_principal.libsonnet'),
  service_principal_certificate: (import 'resources/service_principal_certificate.libsonnet'),
  service_principal_claims_mapping_policy_assignment: (import 'resources/service_principal_claims_mapping_policy_assignment.libsonnet'),
  service_principal_delegated_permission_grant: (import 'resources/service_principal_delegated_permission_grant.libsonnet'),
  service_principal_password: (import 'resources/service_principal_password.libsonnet'),
  service_principal_token_signing_certificate: (import 'resources/service_principal_token_signing_certificate.libsonnet'),
  synchronization_job: (import 'resources/synchronization_job.libsonnet'),
  synchronization_secret: (import 'resources/synchronization_secret.libsonnet'),
  user: (import 'resources/user.libsonnet'),
  user_flow_attribute: (import 'resources/user_flow_attribute.libsonnet'),
  data: (import 'data/main.libsonnet'),
}
